########################################################################
# Makefile for the FLOSIC code. Generated by the shell script compile #
########################################################################
#
# COMPILING OPTIONS, set Y or N for these options
#
# Parallel compilation
MPI=Y
# Group calculation
GROUP=N
# Atomic force in the FLOSIC calculation
ATOMFORCE=N

# COMPILERS
#
#
# Fedora (quantum) -- edited for UTEP-Jakar
#
CC = gcc
FC = mpif90 
FFF = mpif90
#
# MAC OSX (Darwin Unix)
#
#CC = gcc
#FC = gfortran 
#FFF = gfortran
#
# UTEP-HPC/TACC
#
#CC = gcc
#FC = mpif90 
#FFF = mpif90
#
# NERSC
#
#CC = cc
#FC = ftn 
#FFF = ftn

# Home Libraries
# Fedora repository installation
IDIR = -I/usr/lib64/gfortran/modules/
LDIR = -L$(OPENBLAS_LIB)
#IDIR = -I$(HOME)/include/
LIBS = $(LDIR) 

#
# COMPILER FLAGS
# 
# Fedora (Quantum) flags
#
#CFLAGS = 
#FFLAGS = 
#LFLAGS = 
CFLAGS = -O3 
FFLAGS = -O3 -std=legacy -fno-align-commons -fbacktrace -Wno-argument-mismatch 
LFLAGS = -O3 -std=legacy -fno-align-commons -fbacktrace -Wno-argument-mismatch 
#FFLAGS = -std=legacy -g -fcheck=bounds -fno-align-commons -fbacktrace
#LFLAGS = -std=legacy -g -fcheck=bounds -fno-align-commons -fbacktrace
#
# HPC flags
#
#CFLAGS = -O3 
#FFLAGS = -fbounds-check
#LFLAGS = -fbounds-check 
#CFLAGS = -O0
#FFLAGS = -O3 -mcmodel=large -assume buffered_io
#LFLAGS = -O3 -mcmodel=large -assume buffered_io
#FFLAGS = -O0 -g -mcmodel=large -check bounds
#LFLAGS = -O0 -g -mcmodel=large -check bounds
#
# TACC flags
#
#CFLAGS = -O3 
#FFLAGS = -O3 -fPIC -shared-intel -mcmodel=large
#LFLAGS = -O3 -fPIC -shared-intel -mcmodel=large
#
# NERSC flags
#
# Compiler flags for users
#CFLAGS = -O3
#FFLAGS = -O3 -dynamic -mcmodel=medium -standard-semantics -assume buffered_io
#LFLAGS = -O3 -dynamic -mcmodel=medium -standard-semantics -assume buffered_io
# Compiler flags for developers
#FFLAGS = -O3
#FFLAGS = -O0 -traceback -check all -stand f03 -warn -dynamic -mcmodel=medium #intel
#FFLAGS = -O3 -traceback -fpe0 -stand f03 -e03 -warn -dynamic -mcmodel=medium #intel
#FFLAGS = -O0 -traceback -dynamic -mcmodel=medium
#FFLAGS = -O0 -traceback -check all -stand f03 -e03 -warn -dynamic -mcmodel=medium #intel
#FFLAGS = -O0 -traceback -check all -stand f03 -warn -dynamic -mcmodel=medium #intel
#FFLAGS = -O3 -traceback -dynamic -mcmodel=medium

#FFLAGS = -profile-functions -profile-loops=all -profile-loops-report=2 -O3 -traceback -dynamic -mcmodel=medium 
#LFLAGS = -profile-functions -profile-loops=all -profile-loops-report=2 -O3 -dynamic -mcmodel=medium
#FFLAGS = -dynamic -mcmodel=medium
#LFLAGS = -dynamic -mcmodel=medium
#FFLAGS = -O0 -g -dynamic -mcmodel=medium -check bounds
#LFLAGS = -O0 -g -dynamic -mcmodel=medium -check bounds
#FFLAGS = -O3 -dynamic -mcmodel=medium -h profile_generate #-mcmodel=medium 
#LFLAGS = -O3 -dynamic -mcmodel=medium -h profile_generate #-mcmodel=medium
#FFLAGS = -traceback -profile-functions -profile-loops=all -profile-loops-report=2 -O3 -traceback -dynamic -mcmodel=medium 
#LFLAGS = -traceback -profile-functions -profile-loops=all -profile-loops-report=2 -O3 -dynamic -mcmodel=medium
#
# NERSC with intel MKL
#
#FFLAGS = -mkl -I${MKLROOT}/include

#To use KNL, swap the module via: module swap craype-haswell craype-mic-knl
#You can set separate flags for login node and compute node here.
#COMPUTENODE = -xMIC-AVX512
#LOGINNODE = -xAVX
COMPUTENODE =
LOGINNODE =

#
# Process options
#
ifeq ($(MPI),Y)
MPI1=-DMPI
else
MPI1=
endif
ifeq ($(GROUP),Y)
GROUP1= -DGROUP
else
GROUP1=
endif
ifeq ($(ATOMFORCE),Y)
ATOMFORCE1= -DATOMFORCE
else
ATOMFORCE1=
endif
#
# Main Options
#
OPTIONS = $(MPI1) $(GROUP1) $(ATOMFORCE1) -DNOCOMM 

.SUFFIXES: .c .ftn .F .f .F90 .f90 .o
#
# COMPILING RULES
#
.c.o:
	$(CC) $(CFLAGS) -c $*.c

%.o: %.ftn
	$(FC) $(COMPUTENODE) $(FFLAGS) $(OPTIONS) -c $<

%.o: %.F
	$(FC) $(COMPUTENODE) $(FFLAGS) $(OPTIONS) -c $<

%.o: %.f
	$(FC) $(COMPUTENODE) $(FFLAGS) -c $<

%.o: %.F90
	$(FC) $(COMPUTENODE) $(FFLAGS) $(OPTIONS) $(LIBS) -c $<

%.o: %.f90
	$(FC) $(COMPUTENODE) $(FFLAGS) $(LIBS) -c $<
#
# Object modules
#
SIC = fodonmsh.o fermi_occ.o fermilv_sic.o diagon_sic.o diagsvd.o ewevge.o ewevsvd.o allocate_sic.o allocate_diag1.o frmiorb.o apotnl_dft.o apotnl_sic.o coupot_sic.o diagv_fo.o focgrad.o frmorb2.o loravel.o lowden_files.o moravel.o newwaves.o readmesh.o scfsicw.o swapfgi.o symfrm.o unravel2.o readwfsic.o orbsic.o wffrm.o write_phires.o siclag_der.o lagmult_slv.o scaledlbfgs.o write_table.o delete_oldfiles.o electronic_geometry_lbfgs.o

#SIC orbital subroutine 
SIC2 = frmorb_mpi.o pamlmsic.o paslmsic.o pamlmsic_der.o paslmsic_der.o 

#SIC symmetry
SIC3 = fodmat_all.o sicham.o sicmat.o scissor.o sichammixdrv.o newwave_2020.o recursion.o #newwave_serial_symmetry.o

METAGGA = normh.o hammixdrv.o subvlxc_libxc.o gettau_par.o getvlxc.o setdftyp.o r2scanex.o r2scancor.o regscan.o scan.o overnum_libxc.o pamhamil_libxc.o pashamil_libxc.o gethold_libxc.o gethold_mgga.o atomscfvlxc.o gtgraddrv.o call_mgga.o  pbe_integrationbyparts.o
#For the original rSCAN, use regscan_jcp.o in place of regscan.o.

LOCALSIC = dori.o weizsacker.o modscan.o printscaledpzsic.o scaledsic.o

FTNBASICS = banner.o mod_periodic_table.o modules_sic.o modules.o modules2.o new_input_reader.o addpts.o alcutoff.o angmsh.o apotnl.o atcube.o ax2thet.o bfsa.o brtfrc.o cbrt.o ckworker.o coresplit.o cosf.o coupot1.o densold.o doint.o dvpmesh.o expnl.o fctrl.o fermilv.o fffmt3.o fffmt4.o fffmtc.o fillist.o fixit.o flacub.o mfpulay.o frcslv.o frcslv0.o frcsym.o freetid.o ftime.o g1dint.o gaussp.o gausspp.o getbas.o gethold.o gettid.o gft.o ginted.o glbarrier.o gtdncf.o gtenrgy.o gtgrad.o gtntid.o gtorbnh.o hammat.o hfflocal.o is1dim.o ixnmab.o ldacor.o lebedev.o cpuhog.o mpiclus.o pamfpul.o pamhamil.o pammesh.o pampoiss.o pamvlxc.o pasfpul.o pashamil.o pasmesh.o paspoiss.o pasvlxc.o pversion.o senddata.o newwave_serial.o numforce.o numham.o optrigr.o optrmsh.o optvmsh.o overlap.o overnum.o ovlons.o patch.o poisson1.o poisson2.o polyx.o radmsh.o rcutoff.o readinp.o readwf.o readwf2.o reormsh.o rgcmsh.o rhofft.o rhofftpar.o sinf.o spcpart.o splithere.o stopit.o stroud.o symbol.o testbas.o tstmsh.o update.o vmesh.o vstart.o wfout.o wfout2.o wparamas.o main.o writefrc.o call_forces.o global_call.o

CUBEBASICS = modules_sic.o modules.o modules2.o cube.o dens_cube.o addpts.o alcutoff.o angmsh.o atcube.o ax2thet.o bfsa.o brtfrc.o cbrt.o coresplit.o coupot1.o cosf.o  densold.o dvpmesh.o fctrl.o fermilv.o fffmt3.o fffmt4.o fffmtc.o fillist.o  flacub.o fixit.o mfpulay.o frcslv.o frcslv0.o   frcsym.o g1dint.o gaussp.o getbas.o gausspp.o  gethold.o ginted.o gft.o gtdncf.o gtgrad.o gtorbnh.o hfflocal.o hammat.o is1dim.o ldacor.o lebedev.o senddata.o newwave_serial.o numforce.o numham.o optrigr.o optrmsh.o overlap.o overnum.o optvmsh.o ovlons.o patch.o rcutoff.o readinp.o readwf.o readwf2.o splithere.o stopit.o vmesh.o testbas.o tstmsh.o vstart.o stroud.o spcpart.o sinf.o rgcmsh.o reormsh.o radmsh.o poisson1.o poisson2.o polyx.o expnl.o ckworker.o pammesh.o pampoiss.o pamfpul.o pamhamil.o pmat_mul.o sdiagge_exc.o freetid.o pamvlxc.o gettid.o global_call.o gtntid.o


FBASICSMPI = diag_s_sym.o

FBASICS = diag_p_sym.o ewevsp.o diagsp_d.o prilmat.o xbecke.o init_inputs.o defaultkey.o strcom.o strnum.o gorbdrv.o dcopy.o dscal.o strext.o get_mass.o utravel.o chkscf.o eleinfo.o afpot.o atmfit.o atomksover.o backtr.o bdallbas.o bdbhsbas.o cgrad.o chkmin.o choles.o ckrmat.o clsgrp.o crepmat.o dcabs1.o det.o distance.o ffermi.o fgmat.o fintpol.o fmtcal.o fonedm.o frcnonl.o gasites.o gausspiv.o gcor2.o gcor.o get_cmat.o getgrp.o gsmat.o gtbare.o gtrhocr.o gttime.o harmonics.o hknatm.o igetatm.o inverse.o ipschg.o iqldia.o iswap.o kinm3d.o knmxsf.o lb1.o lb2.o lbfgs.o lenstr.o logcgr.o lsame.o macheps.o matraf.o mcsrch.o mcstep.o minimize.o mixing.o obinfo.o overlap3d.o ovlatm.o ovlp1d.o ovlp3d.o ovmxsf.o pbecor.o pbeex.o pw91ex.o pw91lc.o pw91nc.o readext.o readpsp.o rhcdrv.o rpfit.o sallbas.o sbhsbas.o sbhspsp.o setbas.o setpsp.o sortvc.o strcomp.o swap.o tabdrv.o testnsb.o thcndr.o thcnov.o timout.o tridia.o unravel.o upravel.o verlet.o vlocal.o vnlham.o wfravel.o atomscf.o extpot.o isetup_std.o isetup_frag.o isetup_new_input.o diagsp.o diagsp2.o ezstart.o allocate_sic_shm.o


POSTCONVRG = moss1.o efg.o r_expect_val.o hyperf.o rhogrid.o wfgrid.o findhomo.o findstate.o 

POSTACTIVEMPI = sdiagge_n.o sdiagge_exc.o pmat_mul.o

POSTACTIVE= dosjnt.o dosjnt_s1.o dosjnt3.o pamdosjnt.o pasdosjnt.o writewf.o wfwind.o spnmat.o calldecomp.o decomp.o wfgrid_paul.o rhogrid.o prep_scala.o atomsph.o readwf_frag.o global_2_local.o

EXTRAFIL = diagge.o diag_p_gsym.o check_inputs.o copyright.o myclock.o

DISP = dftd3_grimme.o copyc6.o

FRAGBASICS = modules.o fragment.o diagge.o lowden.o modules2.o check_inputs.o gttime.o eleinfo.o myclock.o sdiagge_n.o prep_scala.o trigger.o scala_call.o

BASIS = sallbas3.o getbasname.o

GIT = gitversion.o

WFX = wfwind2.o write_unsym.o wfxdrv.o wfxmos.o printmo.o printbasis.o wfxtag.o moldenthings.o moldendrv.o moldenmos.o check_molden.o


EXCITED = particles.o lowden.o init_mpi.o excrewrite.o orthogonalize_hole.o fill_local.o fill_global.o

DMAT = denmat_serial.o denmat_mpi.o coupot_dmat.o get_denmat_atoms.o dmatmix.o convert_dmat.o print_psicoef.o gtkinrgy_dmat.o write_denmat.o

POPULATION = population.o mat_sqrt.o packed_2_full.o

LEVY_PERDEW = levy_perdew_virial.o

ifeq ($(GROUP),Y)
GROUPOBJ = senddata_managers.o ckworker_grp_manager.o pamapotnl_grp.o cpuhog_group_manager.o cpuhog_group_worker.o freetid_grp_managers.o gtntid_grp_manager.o pasapotnl_grp.o paslmsic_group.o senddata_grp.o paspoiss_grp.o pamlmsic_group.o pamvlxc_group.o pasvlxc_group.o ckworker_grp.o gtntid_grp.o freetid_grp.o pampoiss_grp.o gettid_grp.o read_groups.o group_split.o
else
GROUPOBJ=
endif

CUBEOBJ = mod_periodic_table.o new_input_reader.o $(CUBEBASICS) $(FBASICS) $(METAGGA) $(EXTRAFIL) $(POSTACTIVE) $(BASIS) $(DISP) $(WFX) $(DMAT) $(GROUPOBJ) $(EFPOBJ) $(SIC) $(SIC2) $(SIC3) $(LOCALSIC) $(LEVY_PERDEW)

BLAS= libgoto_opteron-r1.13.a
ATLAS= libatlas.a
LAPACK= liblapack.a

UT_MKL_LIB = /opt/intel/mkl/lib/intel64/

# Dependences
#
#$(FBASICS): PARAMS commons.inc
#$(FTNBASICS): PARAMS commons.inc

OBJ = $(FTNBASICS) $(FBASICS) $(FBASICSMPI) $(LOCALSIC) $(METAGGA) $(SIC) $(SIC2) $(SIC3) $(EXTRAFIL) $(POSTACTIVE) $(POSTACTIVEMPI) $(BASIS) $(DISP) $(GIT) $(WFX) $(DMAT) $(GROUPOBJ) $(POPULATION) $(LEVY_PERDEW) 

# Binary file name
BIN = nrlmol_exe

# Default target
#
all: nrlmol

# Specific compilation
#
macheps2.o: macheps2.f
	$(FC) -O0 -c macheps2.f

# Specific targets
#
#condcomp:
#	python3 ./make_git_version.py
#	$(FC) $(LOGINNODE) $(LFLAGS) -o condcomp condcomp.f 

# Instruction to compile utility cube
cube: condcomp $(CUBEOBJ)
	$(FFF) $(LFLAGS) $(CUBEOBJ) -o cube_exe -llapack -lblas
#	$(FFF) $(LFLAGS) $(CUBEOBJ) -fopenmp -o cube_exe -Wl,-rpath,$(UT_MKL_LIB) -L$(UT_MKL_LIB) -Wl,--start-group  --enable-static   \
#	-lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -lpthread -lm




#
# LINKING OPTIONS
#
#nrlmol: condcomp $(OBJ)
nrlmol: $(OBJ)
# luit
#       $(FFF) $(LFLAGS) $(OBJ) $(BLAS) $(ATLAS) $(LAPACK) -o $(BIN)
# TACC
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -Wl,-rpath,$(TACC_MKL_LIB) -L$(TACC_MKL_LIB) -Wl,--start-group \
#        -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -lpthread -lm
# Fedora (Quantum/Luis local)
	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -lopenblas $(LIBS) 
# Ubuntu
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -llapack -lblas -lblacsCinit-openmpi -lblacs-openmpi -lscalapack-openmpi
# MAC OS machines
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -llapack -lblas
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -llapack -lblas -lscalapack -lmpiblacs
# NERSC
#	$(FFF) $(LFLAGS) $(COMPUTENODE) $(OBJ) -o $(BIN) 
# NERSC with intel MKL
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) ${MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group ${MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm
# HPC
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -Wl,-rpath,$(UT_MKL_LIB) -L$(UT_MKL_LIB) -Wl,--start-group \
        -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -lpthread -lm
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -Wl,-rpath,$(UT_MKL_LIB) -L$(UT_MKL_LIB) -Wl,--start-group \
        -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -Wl,--end-group -lpthread -lm
#	$(FFF) $(LFLAGS) $(OBJ) -o $(BIN) -Wl,-rpath,$(UT_MKL_LIB) -L$(UT_MKL_LIB) -lmkl_blas95 -llapack_95


#
# FRAGMENT SECTION
#
BINFRAG = nrlmol_frag

#fragment: condcomp $(FRAGBASICS)
fragment: $(FRAGBASICS)
# Fedora (Quantum/Luis local)
#	$(FC) $(FRAGBASICS) -o $(BINFRAG) -llapack -lblas
# Hopper
#	$(FC) $(FRAGBASICS) -o $(BINFRAG)
# HPC
#	$(FFF) $(FRAGBASICS) -o $(BINFRAG) -Wl,-rpath,$(UT_MKL_LIB) -L$(UT_MKL_LIB) -Wl,--start-group \
        -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -lpthread -lm
# TACC
#	$(FFF) $(OBJ) -o $(BINFRAG) -Wl,-rpath,$(TACC_MKL_LIB) -L$(TACC_MKL_LIB) -Wl,--start-group \
        -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -Wl,--end-group -lpthread -lm

# clean up
#
clean:
	rm -f $(OBJ) $(CUBEBASICS) $(EXTRAFIL) $(POSTACTIVE) $(FRAGBASICS) *.mod condcomp $(BIN) $(BINFRAG)

subclean:
	rm -f $(BASICS)
doc:
	doxygen Doxyfile
